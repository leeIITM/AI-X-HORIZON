{
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "name": "GAN+TGCN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "accelerator": "GPU",
    "kaggle": {
      "accelerator": "nvidiaTeslaT4",
      "dataSources": [
        {
          "sourceId": 9515604,
          "sourceType": "datasetVersion",
          "datasetId": 5792901
        }
      ],
      "dockerImageVersionId": 30776,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/leeIITM/AI-X-HORIZON/blob/main/%20GAN%2BBiLSTM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "\n",
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n",
        "# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "import os\n",
        "import sys\n",
        "from tempfile import NamedTemporaryFile\n",
        "from urllib.request import urlopen\n",
        "from urllib.parse import unquote, urlparse\n",
        "from urllib.error import HTTPError\n",
        "from zipfile import ZipFile\n",
        "import tarfile\n",
        "import shutil\n",
        "\n",
        "CHUNK_SIZE = 40960\n",
        "DATA_SOURCE_MAPPING = 'mvts-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5792901%2F9515604%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240930%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240930T190320Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D414dcd76ba623114ad04cd3f6676dcb1d2f30026338c3c60abb1c0a583a5aa7e754deb264ff3005dc5639e1fec2c39acca9906fe1fbab0ab9cc68d01d102413c6538978f372cf29873fb9706cb59fe062aa53c55d25fd37e273ba98b1d7fa356ffa3ca161f2ececb14ec4b62767f9986abe796dc749496d3e8b5f2580155cc4808d0bc5316e0a3c536b2e544845bd0aada172b00626e467cf28def16439a1292c7de578526e90a9d2afb875def04d912df02f16e1d9ceea79219f6a1ad320b753c0a6f15ea7a82b918101f10f537e3206719c83b355dd5a16ea1f96c6357cd56b407f0536f7274b9eaf44b7389ac25b1292005c559d5c06e1f95a4bf61dd0c3d'\n",
        "\n",
        "KAGGLE_INPUT_PATH='/kaggle/input'\n",
        "KAGGLE_WORKING_PATH='/kaggle/working'\n",
        "KAGGLE_SYMLINK='kaggle'\n",
        "\n",
        "!umount /kaggle/input/ 2> /dev/null\n",
        "shutil.rmtree('/kaggle/input', ignore_errors=True)\n",
        "os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n",
        "os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n",
        "\n",
        "try:\n",
        "  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "try:\n",
        "  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "\n",
        "for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n",
        "    directory, download_url_encoded = data_source_mapping.split(':')\n",
        "    download_url = unquote(download_url_encoded)\n",
        "    filename = urlparse(download_url).path\n",
        "    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n",
        "    try:\n",
        "        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n",
        "            total_length = fileres.headers['content-length']\n",
        "            print(f'Downloading {directory}, {total_length} bytes compressed')\n",
        "            dl = 0\n",
        "            data = fileres.read(CHUNK_SIZE)\n",
        "            while len(data) > 0:\n",
        "                dl += len(data)\n",
        "                tfile.write(data)\n",
        "                done = int(50 * dl / int(total_length))\n",
        "                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n",
        "                sys.stdout.flush()\n",
        "                data = fileres.read(CHUNK_SIZE)\n",
        "            if filename.endswith('.zip'):\n",
        "              with ZipFile(tfile) as zfile:\n",
        "                zfile.extractall(destination_path)\n",
        "            else:\n",
        "              with tarfile.open(tfile.name) as tarfile:\n",
        "                tarfile.extractall(destination_path)\n",
        "            print(f'\\nDownloaded and uncompressed: {directory}')\n",
        "    except HTTPError as e:\n",
        "        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n",
        "        continue\n",
        "    except OSError as e:\n",
        "        print(f'Failed to load {download_url} to path {destination_path}')\n",
        "        continue\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "WMlhRZ6-UNkq"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F"
      ],
      "metadata": {
        "id": "lmOdehkzwWYm",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:09.791959Z",
          "iopub.execute_input": "2024-09-30T18:04:09.792301Z",
          "iopub.status.idle": "2024-09-30T18:04:13.984068Z",
          "shell.execute_reply.started": "2024-09-30T18:04:09.792265Z",
          "shell.execute_reply": "2024-09-30T18:04:13.983129Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YX9tmGitUNks"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torch-geometric"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kabPLtuFNX3i",
        "outputId": "8337dc04-103f-42e2-977e-9616ad6d214e",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:13.986024Z",
          "iopub.execute_input": "2024-09-30T18:04:13.986581Z",
          "iopub.status.idle": "2024-09-30T18:04:27.794812Z",
          "shell.execute_reply.started": "2024-09-30T18:04:13.986527Z",
          "shell.execute_reply": "2024-09-30T18:04:27.793663Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Collecting torch-geometric\n  Downloading torch_geometric-2.6.1-py3-none-any.whl.metadata (63 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.1/63.1 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (3.9.5)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (2024.6.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (3.1.4)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (1.26.4)\nRequirement already satisfied: psutil>=5.8.0 in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (5.9.3)\nRequirement already satisfied: pyparsing in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (3.1.2)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (2.32.3)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (4.66.4)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (6.0.5)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (1.9.4)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (4.0.3)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch-geometric) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (2024.8.30)\nDownloading torch_geometric-2.6.1-py3-none-any.whl (1.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m19.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: torch-geometric\nSuccessfully installed torch-geometric-2.6.1\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import torch #as th\n",
        "import os\n",
        "import pickle\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "-hb4wPNumnNa",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:27.796401Z",
          "iopub.execute_input": "2024-09-30T18:04:27.796813Z",
          "iopub.status.idle": "2024-09-30T18:04:27.802365Z",
          "shell.execute_reply.started": "2024-09-30T18:04:27.796765Z",
          "shell.execute_reply": "2024-09-30T18:04:27.801282Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#loading data\n",
        "def load(file_name):\n",
        "    with open(file_name, 'rb') as fp:\n",
        "        obj = pickle.load(fp)\n",
        "    return obj\n",
        "\n",
        "\n",
        "\n",
        "#set data path and load data\n",
        "datapath =\"/kaggle/input/mvts-dataset/flare_prediction_mvts_data.pck\"\n",
        "labelpath =\"/kaggle/input/mvts-dataset/flare_prediction_labels.pck\"\n",
        "mvts_1540=load(datapath)\n",
        "print(mvts_1540[0].shape)\n",
        "labels_1540=load(labelpath)\n",
        "\n",
        "#Check data\n",
        "print(\"MVTS dataset shape: \", mvts_1540.shape, \"  type: \", type(mvts_1540)) # (1540, 33, 60)\n",
        "print(\"Labels shape: \", labels_1540.shape, \"  type: \", type(labels_1540))     # (1540,)\n",
        "print(\"unique labels: \", np.unique(labels_1540))# [0 1 2 3]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A2PIhG_GmrZO",
        "outputId": "46a84b42-c667-45cb-99c1-4dfb9367a450",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:27.805141Z",
          "iopub.execute_input": "2024-09-30T18:04:27.805579Z",
          "iopub.status.idle": "2024-09-30T18:04:28.109585Z",
          "shell.execute_reply.started": "2024-09-30T18:04:27.805535Z",
          "shell.execute_reply": "2024-09-30T18:04:28.108537Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "(33, 60)\nMVTS dataset shape:  (1540, 33, 60)   type:  <class 'numpy.ndarray'>\nLabels shape:  (1540,)   type:  <class 'numpy.ndarray'>\nunique labels:  [0 1 2 3]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(labels_1540.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hb7F2TjdREx0",
        "outputId": "2c148995-aa01-420d-ffad-9068ee6941b7",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:28.110959Z",
          "iopub.execute_input": "2024-09-30T18:04:28.111375Z",
          "iopub.status.idle": "2024-09-30T18:04:28.117275Z",
          "shell.execute_reply.started": "2024-09-30T18:04:28.111338Z",
          "shell.execute_reply": "2024-09-30T18:04:28.116222Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "(1540,)\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Step 2: Count occurrences of each class label\n",
        "unique, counts = np.unique(labels_1540, return_counts=True)\n",
        "print(unique)\n",
        "print(counts)\n",
        "# Step 3: Plotting the distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Bar chart\n",
        "plt.bar(unique, counts, color=['blue', 'orange', 'green', 'red'])\n",
        "plt.xlabel('Class Labels')\n",
        "plt.ylabel('Counts')\n",
        "plt.title('Distribution of Class Labels')\n",
        "plt.xticks(unique)  # Set x-ticks to be the unique class labels\n",
        "plt.grid(axis='y')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "J9y1TxDYR1bT",
        "outputId": "6c49f9e7-7353-47ef-b7ef-5b547d67e480",
        "execution": {
          "iopub.status.busy": "2024-09-30T14:01:15.217405Z",
          "iopub.execute_input": "2024-09-30T14:01:15.217756Z",
          "iopub.status.idle": "2024-09-30T14:01:15.54379Z",
          "shell.execute_reply.started": "2024-09-30T14:01:15.217714Z",
          "shell.execute_reply": "2024-09-30T14:01:15.542813Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "[0 1 2 3]\n[385 385 385 385]\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Graph construction"
      ],
      "metadata": {
        "id": "7IH8be_AnFuO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Binary classification -> Data label conversion to BINARY class\n",
        "def get_binary_labels_from(labels_str):\n",
        "    tdf = pd.DataFrame(labels_str, columns = ['labels'])\n",
        "    data_classes= [0, 1, 2, 3]\n",
        "    d = dict(zip(data_classes, [0, 0, 1, 1]))\n",
        "    arr = tdf['labels'].map(d, na_action='ignore')\n",
        "    return arr.to_numpy()\n",
        "\n",
        "#un-comment next line for Binary classification experiment\n",
        "#labels_1540 = get_binary_labels_from(labels_1540)\n",
        "\n",
        "# data preparation: first 25 nodes only\n",
        "\n",
        "def extract_num_nodes(mvts, num_nodes):\n",
        "    #trans = GetTransposed2D(mvts)\n",
        "    reducedTrans = []\n",
        "    for i in range(len(mvts)):\n",
        "          temp = mvts[i]\n",
        "          #=report['accuracy']\n",
        "          reducedTrans.append(temp[0:num_nodes, :])\n",
        "\n",
        "    return np.array(reducedTrans)\n",
        "\n",
        "mvts_1540 = extract_num_nodes(mvts_1540, 25)\n",
        "\n",
        "#Stratified train test split\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(mvts_1540, labels_1540, test_size=0.3, random_state=0, stratify=labels_1540)\n",
        "\n",
        "#Takes 3D array(x,y,z) >> transpose(y,z) >> return (x,z,y)\n",
        "def GetTransposed2D(arrayFrom):\n",
        "    toReturn = []\n",
        "    alen = arrayFrom.shape[0]\n",
        "    for i in range(0, alen):\n",
        "        toReturn.append(arrayFrom[i].T)\n",
        "\n",
        "    return np.array(toReturn)\n",
        "\n",
        "#Takes 3D array(x,y,z) >> Flatten() >> return (y,z)\n",
        "def Make2D(array3D):\n",
        "    toReturn = []\n",
        "    x = array3D.shape[0]\n",
        "    y = array3D.shape[1]\n",
        "    for i in range(0, x):\n",
        "        for j in range(0, y):\n",
        "            toReturn.append(array3D[i,j])\n",
        "\n",
        "    return np.array(toReturn)\n",
        "\n",
        "#Transform instance(92400, 33) into(1540x60x33)\n",
        "def Get3D_MVTS_from2D(array2D, windowSize):\n",
        "    arrlen = array2D.shape[0]\n",
        "    mvts = []\n",
        "    for i in range(0, arrlen, windowSize):\n",
        "        mvts.append(array2D[i:i+windowSize])\n",
        "\n",
        "    return np.array(mvts)\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "#LSTM uses sigmoid and tanh that are sensitive to magnitude so values need to be normalized\n",
        "# normalize the dataset\n",
        "def GetStandardScaler(data2d):\n",
        "    scaler = StandardScaler()\n",
        "    scaler = scaler.fit(data2d)\n",
        "    return scaler\n",
        "\n",
        "def GetStandardScaledData(data2d):\n",
        "    scaler = StandardScaler()\n",
        "    scaler = scaler.fit(data2d)\n",
        "    #print(scaler.mean_)\n",
        "    data_scaled = scaler.transform(data2d)\n",
        "    return data_scaled\n",
        "\n",
        "def transform_scale_data(data3d, scaler):\n",
        "    trans = GetTransposed2D(data3d)\n",
        "    data2d = Make2D(trans)\n",
        "    data_scaled = scaler.transform(data2d)\n",
        "    mvts_scalled = Get3D_MVTS_from2D(data_scaled, data3d.shape[2])#,60)\n",
        "    transBack = GetTransposed2D(mvts_scalled)\n",
        "    return transBack\n",
        "\n",
        "def build_edge_index_tensor(adj):\n",
        "  num_nodes = adj.shape[0]\n",
        "  source_nodes_ids, target_nodes_ids = [], []\n",
        "  for i in range(num_nodes):\n",
        "    for j in range(num_nodes):\n",
        "      if(adj[i,j]==1):\n",
        "        source_nodes_ids.append(i)\n",
        "        target_nodes_ids.append(j)\n",
        "  edge_index = np.row_stack((source_nodes_ids, target_nodes_ids))\n",
        "  edge_index_tensor = torch.from_numpy(edge_index)\n",
        "  return edge_index_tensor\n",
        "\n",
        "def GetGraphAdjMtrx(squareMtx, thresolds, keep_weights=False): #Apply Thresolds to squareMtx\n",
        "    graphs = []\n",
        "    mtxLen = squareMtx.shape[0]\n",
        "    for thr in thresolds:\n",
        "        m = np.zeros((mtxLen,mtxLen))#r = []\n",
        "        for i in range(0,mtxLen):\n",
        "            for j in range(0,mtxLen):\n",
        "                if i == j:# or squareMtx[i,j] > thr:\n",
        "                    m[i,j] = 1\n",
        "                elif squareMtx[i,j] > thr:\n",
        "                  if keep_weights == True:\n",
        "                    m[i,j] = squareMtx[i,j]\n",
        "                  else:\n",
        "                    m[i,j] = 1\n",
        "        graphs.append(m)#np.array(r))\n",
        "    return graphs[0]\n",
        "\n",
        "def get_edge_index_weight_tensor(adj):\n",
        "  num_nodes = adj.shape[0]\n",
        "  source_nodes_ids, target_nodes_ids, edge_weights = [], [], []\n",
        "  for i in range(num_nodes):\n",
        "    for j in range(num_nodes):\n",
        "      if(adj[i,j]>0):\n",
        "        source_nodes_ids.append(i)\n",
        "        target_nodes_ids.append(j)\n",
        "        edge_weights.append(adj[i,j])\n",
        "  edge_index = np.row_stack((source_nodes_ids, target_nodes_ids))\n",
        "  edge_index_tensor = torch.from_numpy(edge_index)\n",
        "  edge_weights_np = np.asarray(edge_weights, dtype=np.float32)\n",
        "  edge_weights_tensor = torch.from_numpy(edge_weights_np)\n",
        "  #print(edge_index_tensor)\n",
        "  #print(edge_weights_tensor)\n",
        "  return edge_index_tensor, edge_weights_tensor\n",
        "\n",
        "#data crawler method\n",
        "def get_adjs_nats(X_3d, num_temporal_split = 4, th = 0):\n",
        "\n",
        "    num_X = X_3d.shape[0]\n",
        "    num_nodes = X_3d.shape[1] #25\n",
        "    len_st = int(X_3d.shape[2] / num_temporal_split) #15\n",
        "\n",
        "    #populating adjacency matrices and node attributes of train events\n",
        "    adjs = np.zeros((num_X, num_temporal_split, num_nodes, num_nodes))\n",
        "    nats = np.zeros((num_X, num_temporal_split, num_nodes, len_st))\n",
        "\n",
        "    for i in range(num_X):\n",
        "      #print('Event: ', i)\n",
        "      mt = X_3d[i].T #X_train[i].T[:,0:25] #consider first 25 solar params\n",
        "      #mt = normalize_node_attributes(mt) ++++++++++++++++++++++++++++++\n",
        "      for j in range(num_temporal_split):\n",
        "        #print('Temporal split: ', j*15, (j+1)*15)\n",
        "        smt = mt[j*len_st:(j+1)*len_st, : ]# len_st  mt[j*15:(j+1)*15,:]\n",
        "        c_smt = np.corrcoef(smt.T)\n",
        "        c_smt[np.isnan(c_smt)]=0\n",
        "        #for l in range(0, num_nodes-1): #gcnconv will automatically add self loops\n",
        "        #    c_smt[l,l] = 0\n",
        "        #smt = normalize_node_attributes(smt)\n",
        "        nats[i,j,:,:] = smt.T\n",
        "        adj = GetGraphAdjMtrx(c_smt, [th], True)#get_adj_mat(c_smt, th, True) #change from ex 10\n",
        "\n",
        "        adjs[i,j,:,:]=adj\n",
        "\n",
        "    return adjs, nats\n",
        "\n"
      ],
      "metadata": {
        "id": "Igxb_6VvnHXG",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:33.617577Z",
          "iopub.execute_input": "2024-09-30T18:04:33.618011Z",
          "iopub.status.idle": "2024-09-30T18:04:34.215997Z",
          "shell.execute_reply.started": "2024-09-30T18:04:33.617976Z",
          "shell.execute_reply": "2024-09-30T18:04:34.214988Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def visualize_graph(adj_matrix, title='Graph'):\n",
        "    # Create a graph from the adjacency matrix\n",
        "    G = nx.Graph()\n",
        "    num_nodes = adj_matrix.shape[0]\n",
        "    for i in range(num_nodes):\n",
        "        for j in range(i+1, num_nodes):  # Only check upper triangle since adj is symmetric\n",
        "            if adj_matrix[i, j] > 0:  # There's an edge\n",
        "                G.add_edge(i, j, weight=adj_matrix[i, j])\n",
        "\n",
        "    # Draw the graph\n",
        "    pos = nx.spring_layout(G)  # positions for all nodes\n",
        "    edges = G.edges(data=True)\n",
        "\n",
        "    # Draw nodes\n",
        "    nx.draw(G, pos, node_color='lightblue', with_labels=True, node_size=500)\n",
        "\n",
        "    # Draw edges with thickness corresponding to the edge weight\n",
        "    nx.draw_networkx_edges(G, pos, edgelist=edges, width=[e[2]['weight'] for e in edges])\n",
        "\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Example usage\n",
        "# Assume `adjs` is the result from get_adjs_nats()\n",
        "adjs, nats = get_adjs_nats(mvts_1540)  # Generate adjacency matrices and node attributes\n",
        "visualize_graph(adjs[0, 0], title='Visualization of first graph')  # Visualize the first temporal split of the first event\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "Z7Dapz-aWyby",
        "outputId": "a1b69697-652a-40c0-9829-eb7d512ffc91",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:38.856702Z",
          "iopub.execute_input": "2024-09-30T18:04:38.857704Z",
          "iopub.status.idle": "2024-09-30T18:04:43.375794Z",
          "shell.execute_reply.started": "2024-09-30T18:04:38.857661Z",
          "shell.execute_reply": "2024-09-30T18:04:43.374826Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import networkx as nx\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def Variance_in_graph(adj_matrix):\n",
        "      G = nx.Graph()\n",
        "      num_nodes = adj_matrix.shape[0]\n",
        "      for i in range(num_nodes):\n",
        "          for j in range(i+1, num_nodes):  # Only check upper triangle since adj is symmetric\n",
        "              if adj_matrix[i, j] > 0:  # There's an edge\n",
        "                  G.add_edge(i, j, weight=adj_matrix[i, j])\n",
        "\n",
        "      # Draw the graph\n",
        "      pos = nx.spring_layout(G)  # positions for all nodes\n",
        "      edges = G.edges(data=True)  # Example: Erdos-Renyi graph\n",
        "\n",
        "      # Calculate degrees\n",
        "      degrees = np.array([d for n, d in G.degree()])\n",
        "\n",
        "      # Calculate mean, variance, and standard deviation\n",
        "      mean_degree = np.mean(degrees)\n",
        "      variance_degree = np.var(degrees)\n",
        "      std_dev_degree = np.std(degrees)\n",
        "\n",
        "      print(f'Mean Degree: {mean_degree}')\n",
        "      print(f'Variance of Degrees: {variance_degree}')\n",
        "      print(f'Standard Deviation of Degrees: {std_dev_degree}')\n",
        "\n",
        "      # Visualize degree distribution\n",
        "      plt.hist(degrees, bins=20, color='skyblue', edgecolor='black')\n",
        "      plt.title('Node Degree Distribution')\n",
        "      plt.xlabel('Degree')\n",
        "      plt.ylabel('Frequency')\n",
        "      plt.grid(axis='y', alpha=0.75)\n",
        "      plt.show()\n",
        "Variance_in_graph(adjs[0, 0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "qOeGLnZKYYdE",
        "outputId": "c6487656-355a-46d2-f134-9811bfad7dad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Mean Degree: 12.4\n\nVariance of Degrees: 2.48\n\nStandard Deviation of Degrees: 1.5748015748023623\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "# Sample data from your results\n",
        "classes = [0, 1, 2, 3]\n",
        "precision = [0.9619, 0.8864, 0.8178, 0.8692]\n",
        "recall = [0.9913, 0.8980, 0.7850, 0.8612]\n",
        "f1_score = [0.9762, 0.8917, 0.8005, 0.8642]\n",
        "\n",
        "x = np.arange(len(classes))\n",
        "width = 0.25\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10,6))\n",
        "bars1 = ax.bar(x - width, precision, width, label='Precision')\n",
        "bars2 = ax.bar(x, recall, width, label='Recall')\n",
        "bars3 = ax.bar(x + width, f1_score, width, label='F1 Score')\n",
        "\n",
        "ax.set_xlabel('Classes')\n",
        "ax.set_ylabel('Scores')\n",
        "ax.set_title('Precision-Recall-F1 Scores by Class')\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(classes)\n",
        "ax.legend()\n",
        "\n",
        "# Adding value labels on top of bars\n",
        "def add_value_labels(bars):\n",
        "    for bar in bars:\n",
        "        height = bar.get_height()\n",
        "        ax.annotate(f'{height:.2f}',\n",
        "                    xy=(bar.get_x() + bar.get_width() / 2., height),\n",
        "                    xytext=(0, 3),\n",
        "                    textcoords=\"offset points\",\n",
        "                    ha='center', va='bottom')\n",
        "\n",
        "add_value_labels(bars1)\n",
        "add_value_labels(bars2)\n",
        "add_value_labels(bars3)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "1VfuZ6-LS9cH",
        "outputId": "4f8c9f44-6752-4ec9-c34d-13a9cbe81cb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#MODELS\n",
        "#node_emb_dim = graph_emb_dim = window_emb_dim = 4; sequence_emb_dim = 128; class_emb_dim = 4\n",
        "# (GCN) Node emb -> (mean) Graph emb -> (Flatten, Linear) -> window emb -> (LSTM) -> Temporal sequence emb -> (Linear) Class emb\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torch_geometric.nn import GCNConv\n",
        "from torch_geometric.nn import global_mean_pool\n",
        "from torch_geometric.data import Data\n",
        "\n",
        "class MVTS_GCN_RNN(torch.nn.Module):\n",
        "  def __init__(self, num_nodes, input_dims, num_temporal_split, device, gcn_hidden_dims, node_emb_dims, graph_emb_dims, window_emb_dims, sequence_emb_dims, num_classes):\n",
        "    super(MVTS_GCN_RNN, self).__init__()\n",
        "    self.num_nodes = num_nodes\n",
        "    self.input_dims = input_dims\n",
        "    self.num_temporal_split = num_temporal_split\n",
        "    self.device = device\n",
        "    self.gcn_hidden_dims = gcn_hidden_dims\n",
        "    self.node_emb_dims = node_emb_dims\n",
        "    self.graph_emb_dims = graph_emb_dims\n",
        "    self.window_emb_dims = window_emb_dims\n",
        "    self.sequence_emb_dims = sequence_emb_dims\n",
        "    self.num_classes = num_classes\n",
        "\n",
        "    self.smt2vector = nn.LSTM(num_nodes, sequence_emb_dims)\n",
        "    self.conv1 = GCNConv(input_dims, gcn_hidden_dims)\n",
        "    self.conv2 = GCNConv(gcn_hidden_dims, node_emb_dims)\n",
        "    self.mean_pool = global_mean_pool(node_emb_dims, num_nodes)\n",
        "    self.node2graph = nn.Linear(node_emb_dims, graph_emb_dims)#change from ex 1\n",
        "    self.seqGraph2window = nn.Linear(sequence_emb_dims+graph_emb_dims, window_emb_dims)\n",
        "    self.window2sequence = nn.LSTM(window_emb_dims, sequence_emb_dims) #change from ex 1\n",
        "    self.sequence2class_space = nn.Linear(sequence_emb_dims, num_classes)\n",
        "\n",
        "  def forward(self, adj_mat_array, node_att_array):\n",
        "     #adj_mat_array -> (4,1,25,25), node_att_array -> (4,25,15)\n",
        "     sequence_vectors = torch.zeros((self.num_temporal_split, self.window_emb_dims), device=self.device).double()\n",
        "     for j in range(self.num_temporal_split):\n",
        "       node_att = node_att_array[j,:,:]#25*15\n",
        "       adj_mat = adj_mat_array[j,:,:]\n",
        "       #prepare for GCNConv\n",
        "       edge_index_tensor, edge_weights_tensor = get_edge_index_weight_tensor(adj_mat)\n",
        "       edge_index = edge_index_tensor.to(self.device)\n",
        "       edge_weights = edge_weights_tensor.to(self.device)\n",
        "       node_attributes_tensor = torch.from_numpy(node_att)\n",
        "       x = node_attributes_tensor.to(self.device)#[25,15]\n",
        "\n",
        "       smvts = torch.t(x)\n",
        "       small_seq_out, _ = self.smt2vector(smvts.view(len(smvts), 1, -1))#input:[15, 25] , output: [15, 128]\n",
        "       last_small_seq_out = small_seq_out[len(small_seq_out)-1] #[1,128]\n",
        "       #GCN on the graph\n",
        "       x = self.conv1(x=x, edge_index=edge_index, edge_weight=edge_weights)\n",
        "       x = F.relu(x)\n",
        "       x = F.dropout(x, training=self.training)\n",
        "       x = self.conv2(x=x, edge_index=edge_index, edge_weight=edge_weights) #x -> [25, 4]\n",
        "       x = F.relu(x) #change from ex 10\n",
        "       x = F.dropout(x, training=self.training) #change from ex 10\n",
        "\n",
        "       #graph embedding\n",
        "       x = torch.mean(x, dim=0).view(1,-1) #->[1,4]#mean pool\n",
        "       graph_vector = x\n",
        "       seq_graph_vector = torch.cat((last_small_seq_out, graph_vector), dim=1) #[1, 132]\n",
        "\n",
        "       #window embedding by linear projection\n",
        "       window_vector = self.seqGraph2window(seq_graph_vector)#[1,64]\n",
        "       window_vector = F.relu(window_vector)\n",
        "       sequence_vectors[j,:]=window_vector\n",
        "     seq_out, _ = self.window2sequence(sequence_vectors.view(len(sequence_vectors), 1, -1))\n",
        "     last_seq_out = seq_out[len(seq_out)-1] #[1,128]\n",
        "     #last_seq_out = F.dropout(last_seq_out, training=self.training) #change from ex 10_2\n",
        "     class_space = self.sequence2class_space(last_seq_out) #[1,4]\n",
        "     class_scores = F.log_softmax(class_space, dim=1)\n",
        "     return class_scores\n"
      ],
      "metadata": {
        "id": "L1QP7L-xnQqN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torch_geometric.nn import GATConv\n",
        "from torch_geometric.nn import global_mean_pool\n",
        "from torch_geometric.data import Data\n",
        "\n",
        "class MVTS_GAT_BiLSTM(torch.nn.Module):\n",
        "    def __init__(self, num_nodes, input_dims, num_temporal_split, device, gat_hidden_dims, node_emb_dims, graph_emb_dims, window_emb_dims, sequence_emb_dims, num_classes):\n",
        "        super(MVTS_GAT_BiLSTM, self).__init__()\n",
        "        self.num_nodes = num_nodes\n",
        "        self.input_dims = input_dims\n",
        "        self.num_temporal_split = num_temporal_split\n",
        "        self.device = device\n",
        "        self.gat_hidden_dims = gat_hidden_dims\n",
        "        self.node_emb_dims = node_emb_dims\n",
        "        self.graph_emb_dims = graph_emb_dims\n",
        "        self.window_emb_dims = window_emb_dims\n",
        "        self.sequence_emb_dims = sequence_emb_dims\n",
        "        self.num_classes = num_classes\n",
        "\n",
        "        # Change LSTM to Bi-LSTM by setting bidirectional=True\n",
        "        self.smt2vector = nn.LSTM(num_nodes, sequence_emb_dims, bidirectional=True)\n",
        "        self.conv1 = GATConv(input_dims, gat_hidden_dims, heads=4, concat=True)  # GAT with 4 attention heads\n",
        "        self.conv2 = GATConv(gat_hidden_dims * 4, node_emb_dims, heads=1, concat=True)  # heads=1 for second layer\n",
        "        self.node2graph = nn.Linear(node_emb_dims, graph_emb_dims)\n",
        "        self.seqGraph2window = nn.Linear(sequence_emb_dims * 2 + graph_emb_dims, window_emb_dims)  # Bi-LSTM doubles the output dims\n",
        "        self.window2sequence = nn.LSTM(window_emb_dims, sequence_emb_dims, bidirectional=True)  # Bi-LSTM for window2sequence\n",
        "        self.sequence2class_space = nn.Linear(sequence_emb_dims * 2, num_classes)  # Bi-LSTM output is 2x sequence_emb_dims\n",
        "\n",
        "    def forward(self, adj_mat_array, node_att_array):\n",
        "        # adj_mat_array -> (4,1,25,25), node_att_array -> (4,25,15)\n",
        "        sequence_vectors = torch.zeros((self.num_temporal_split, self.window_emb_dims), device=self.device).double()\n",
        "\n",
        "        for j in range(self.num_temporal_split):\n",
        "            node_att = node_att_array[j, :, :]  # 25x15\n",
        "            adj_mat = adj_mat_array[j, :, :]\n",
        "            # Prepare for GATConv\n",
        "            edge_index_tensor, edge_weights_tensor = get_edge_index_weight_tensor(adj_mat)\n",
        "            edge_index = edge_index_tensor.to(self.device)\n",
        "            edge_weights = edge_weights_tensor.to(self.device)\n",
        "            node_attributes_tensor = torch.from_numpy(node_att)\n",
        "            x = node_attributes_tensor.to(self.device)  # [25,15]\n",
        "\n",
        "            # Apply Bi-LSTM\n",
        "            smvts = torch.t(x)\n",
        "            small_seq_out, _ = self.smt2vector(smvts.view(len(smvts), 1, -1))  # Input: [15, 25], Output: [15, 256]\n",
        "            last_small_seq_out = small_seq_out[len(small_seq_out) - 1]  # [1,256]\n",
        "\n",
        "            # GAT on the graph\n",
        "            x = self.conv1(x=x, edge_index=edge_index)\n",
        "            x = F.relu(x)\n",
        "            x = F.dropout(x, training=self.training)\n",
        "            x = self.conv2(x=x, edge_index=edge_index)  # x -> [25, 4]\n",
        "            x = F.relu(x)\n",
        "            x = F.dropout(x, training=self.training)\n",
        "\n",
        "            # Graph embedding\n",
        "            x = torch.mean(x, dim=0).view(1, -1)  # -> [1,4] # mean pool\n",
        "            graph_vector = x\n",
        "            seq_graph_vector = torch.cat((last_small_seq_out, graph_vector), dim=1)  # [1, 260]\n",
        "\n",
        "            # Window embedding by linear projection\n",
        "            window_vector = self.seqGraph2window(seq_graph_vector)  # [1,64]\n",
        "            window_vector = F.relu(window_vector)\n",
        "            sequence_vectors[j, :] = window_vector\n",
        "\n",
        "        # Apply Bi-LSTM to sequence_vectors\n",
        "        seq_out, _ = self.window2sequence(sequence_vectors.view(len(sequence_vectors), 1, -1))\n",
        "        last_seq_out = seq_out[len(seq_out) - 1]  # [1,256]\n",
        "\n",
        "        # Classify\n",
        "        class_space = self.sequence2class_space(last_seq_out)  # [1,4]\n",
        "        class_scores = F.log_softmax(class_space, dim=1)\n",
        "        return class_scores\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-09-30T18:04:54.466988Z",
          "iopub.execute_input": "2024-09-30T18:04:54.467568Z",
          "iopub.status.idle": "2024-09-30T18:04:57.080037Z",
          "shell.execute_reply.started": "2024-09-30T18:04:54.467527Z",
          "shell.execute_reply": "2024-09-30T18:04:57.079256Z"
        },
        "trusted": true,
        "id": "dinZTpsqUNku"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "GAN and TGCN"
      ],
      "metadata": {
        "id": "RLktLsTzn2Ts"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch_geometric.nn import GATConv\n",
        "from torch_geometric.nn import global_mean_pool\n",
        "from torch_geometric.data import Data\n",
        "\n",
        "class MVTS_TGCN_GAT(torch.nn.Module):\n",
        "    def __init__(self, num_nodes, input_dims, num_temporal_split, device,\n",
        "                 gat_hidden_dims, node_emb_dims, graph_emb_dims, window_emb_dims,\n",
        "                 sequence_emb_dims, num_classes):\n",
        "        super(MVTS_TGCN_GAT, self).__init__()\n",
        "        self.num_nodes = num_nodes\n",
        "        self.input_dims = input_dims\n",
        "        self.num_temporal_split = num_temporal_split\n",
        "        self.device = device\n",
        "        self.gat_hidden_dims = gat_hidden_dims\n",
        "        self.node_emb_dims = node_emb_dims\n",
        "        self.graph_emb_dims = graph_emb_dims\n",
        "        self.window_emb_dims = window_emb_dims\n",
        "        self.sequence_emb_dims = sequence_emb_dims\n",
        "        self.num_classes = num_classes\n",
        "\n",
        "        # Temporal Graph Convolutional Network\n",
        "        self.gat1 = GATConv(input_dims, gat_hidden_dims)\n",
        "        self.gat2 = GATConv(gat_hidden_dims, node_emb_dims)\n",
        "\n",
        "        # Linear layers\n",
        "        self.seqGraph2window = nn.Linear(sequence_emb_dims + graph_emb_dims, window_emb_dims)\n",
        "        self.window2sequence = nn.Linear(window_emb_dims, sequence_emb_dims)  # Changed from LSTM to Linear\n",
        "        self.sequence2class_space = nn.Linear(sequence_emb_dims, num_classes)\n",
        "\n",
        "        # TGCN related\n",
        "        self.fc_tgc = nn.Linear(num_nodes, sequence_emb_dims)  # For mapping node features to temporal sequence dimensions\n",
        "\n",
        "    def forward(self, adj_mat_array, node_att_array):\n",
        "        # adj_mat_array -> (4,1,25,25), node_att_array -> (4,25,15)\n",
        "        sequence_vectors = torch.zeros((self.num_temporal_split, self.window_emb_dims), device=self.device).double()\n",
        "\n",
        "        for j in range(self.num_temporal_split):\n",
        "            node_att = node_att_array[j, :, :]  # 25*15\n",
        "            adj_mat = adj_mat_array[j, :, :]\n",
        "\n",
        "            # Prepare for GATConv\n",
        "            edge_index_tensor, edge_weights_tensor = get_edge_index_weight_tensor(adj_mat)\n",
        "            edge_index = edge_index_tensor.to(self.device)\n",
        "            edge_weights = edge_weights_tensor.to(self.device)\n",
        "            node_attributes_tensor = torch.from_numpy(node_att).to(self.device)  # [25, 15]\n",
        "\n",
        "            # GAT on the graph\n",
        "            x = self.gat1(node_attributes_tensor, edge_index)\n",
        "            x = F.relu(x)\n",
        "            x = F.dropout(x, training=self.training)\n",
        "            x = self.gat2(x, edge_index)  # x -> [25, node_emb_dims]\n",
        "            x = F.relu(x)\n",
        "            x = F.dropout(x, training=self.training)\n",
        "\n",
        "            # Graph embedding\n",
        "            graph_vector = torch.mean(x, dim=0).view(1, -1)  # [1, node_emb_dims]\n",
        "\n",
        "            # Mapping node features to temporal sequence dimensions\n",
        "            last_small_seq_out = self.fc_tgc(node_attributes_tensor).mean(dim=0).view(1, -1)  # [1, sequence_emb_dims]\n",
        "\n",
        "            # Concatenate the graph and temporal sequence embeddings\n",
        "            seq_graph_vector = torch.cat((last_small_seq_out, graph_vector), dim=1)  # [1, sequence_emb_dims + graph_emb_dims]\n",
        "\n",
        "            # Window embedding by linear projection\n",
        "            window_vector = self.seqGraph2window(seq_graph_vector)  # [1, window_emb_dims]\n",
        "            window_vector = F.relu(window_vector)\n",
        "            sequence_vectors[j, :] = window_vector\n",
        "\n",
        "        # Create a sequence of window embeddings\n",
        "        seq_out = self.window2sequence(sequence_vectors.view(len(sequence_vectors), -1))  # [num_timesteps, sequence_emb_dims]\n",
        "        last_seq_out = seq_out[-1].view(1, -1)  # Take the last output from the linear layer\n",
        "\n",
        "        class_space = self.sequence2class_space(last_seq_out)  # [1, num_classes]\n",
        "        class_scores = F.log_softmax(class_space, dim=1)\n",
        "\n",
        "        return class_scores\n"
      ],
      "metadata": {
        "id": "xvkJUp39n1u_",
        "execution": {
          "iopub.status.busy": "2024-09-30T12:12:45.367113Z",
          "iopub.execute_input": "2024-09-30T12:12:45.368095Z",
          "iopub.status.idle": "2024-09-30T12:12:47.903506Z",
          "shell.execute_reply.started": "2024-09-30T12:12:45.368049Z",
          "shell.execute_reply": "2024-09-30T12:12:47.902673Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "copied code"
      ],
      "metadata": {
        "id": "MZ_k7b1MUNyv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Checkpoint saving/loading functions\n",
        "def save_checkpoint(model, optimizer, epoch, loss, filename='checkpoint.pth'):\n",
        "    torch.save({\n",
        "        'epoch': epoch,\n",
        "        'model_state_dict': model.state_dict(),\n",
        "        'optimizer_state_dict': optimizer.state_dict(),\n",
        "        'loss': loss,\n",
        "    }, filename)\n",
        "\n",
        "def load_checkpoint(model, optimizer, filename='checkpoint.pth'):\n",
        "    if os.path.isfile(filename):\n",
        "        print(f\"Loading checkpoint '{filename}'\")\n",
        "        checkpoint = torch.load(filename)\n",
        "        model.load_state_dict(checkpoint['model_state_dict'])\n",
        "        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
        "        epoch = checkpoint['epoch']\n",
        "        loss = checkpoint['loss']\n",
        "        print(f\"Checkpoint loaded: {filename} (epoch {epoch})\")\n",
        "        return epoch, loss\n",
        "    else:\n",
        "        print(f\"No checkpoint found at '{filename}'\")\n",
        "        return 0, None\n",
        "\n",
        "# Model parameters\n",
        "torch.manual_seed(0)\n",
        "\n",
        "NUM_NODES = 25\n",
        "INPUT_DIMS = 15\n",
        "NUM_TEMPORAL_SPLIT = 4\n",
        "GCN_HIDDEN_DIMS = 4\n",
        "NODE_EMB_DIMS = 4\n",
        "GRAPH_EMB_DIMS = NODE_EMB_DIMS\n",
        "WINDOW_EMB_DIMS = 64\n",
        "SEQUENCE_EMB_DIMS = 128\n",
        "NUM_CLASSES = 4\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "# Function to get model parameters\n",
        "def get_model_params():\n",
        "    model = MVTS_GAT_BiLSTM(NUM_NODES, INPUT_DIMS, NUM_TEMPORAL_SPLIT, device, GCN_HIDDEN_DIMS, NODE_EMB_DIMS, GRAPH_EMB_DIMS, WINDOW_EMB_DIMS, SEQUENCE_EMB_DIMS, NUM_CLASSES).to(device).double()\n",
        "    loss_function = nn.NLLLoss()\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-3)\n",
        "    return model, loss_function, optimizer\n",
        "\n",
        "# Function to get accuracy report\n",
        "def get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    numTrain = Xtrain.shape[0]\n",
        "    numTest = Xtest.shape[0]\n",
        "    trainAdjs, trainNats = get_adjs_nats(Xtrain, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "    testAdjs, testNats = get_adjs_nats(Xtest, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "\n",
        "    model, loss_function, optimizer = get_model_params()\n",
        "\n",
        "    # Load checkpoint\n",
        "    start_epoch, _ = load_checkpoint(model, optimizer)\n",
        "\n",
        "    maxAcc = 0\n",
        "    max_classification_report_dict = 0\n",
        "    max_acc_epoch = 0\n",
        "\n",
        "    for epoch in range(start_epoch, epochs):  # Start from loaded epoch\n",
        "        for i in range(numTrain):\n",
        "            model.zero_grad()\n",
        "            class_scores = model(trainAdjs[i], trainNats[i])\n",
        "            target = torch.from_numpy(np.array([ytrain[i]]))\n",
        "            target = target.to(device)\n",
        "            loss = loss_function(class_scores, target)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "        if epoch % epoch_interval == 0:\n",
        "            print(\"epoch: \", epoch + 1, \"   loss: \", loss.item())\n",
        "            # Save checkpoint\n",
        "            save_checkpoint(model, optimizer, epoch, loss.item(), filename='checkpoint.pth')\n",
        "\n",
        "    with torch.no_grad():\n",
        "        numCorrect = 0\n",
        "        predictedLabel = []\n",
        "        for i in range(numTest):\n",
        "            test_class_scores = model(testAdjs[i], testNats[i])\n",
        "            class_prediction = torch.argmax(test_class_scores, dim=-1)\n",
        "            predictedLabel.append(class_prediction[0].cpu().numpy())\n",
        "            if class_prediction == ytest[i]:\n",
        "                numCorrect += 1\n",
        "\n",
        "        acc = numCorrect / numTest\n",
        "        if acc > maxAcc:\n",
        "            maxAcc = acc\n",
        "            max_acc_epoch = epoch\n",
        "            max_classification_report_dict = metrics.classification_report(ytest, predictedLabel, digits=3, output_dict=True)\n",
        "\n",
        "    return maxAcc, max_acc_epoch, max_classification_report_dict\n",
        "\n",
        "# Function to get predictions report\n",
        "def get_predictions_report(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    maxAcc, max_acc_epoch, report_dict = get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs=epochs, epoch_interval=epoch_interval)\n",
        "    print('maxAcc: ', maxAcc, \"  max_acc_epoch:\", max_acc_epoch)\n",
        "    return report_dict\n",
        "\n",
        "# Function for class-specific calculations\n",
        "def doClassSpecificCalulcation(classification_report_dict, y_test):\n",
        "    Accuracy = []\n",
        "    for i in range(len(classification_report_dict)):\n",
        "        report = classification_report_dict[i]\n",
        "        temp = report['accuracy']\n",
        "        Accuracy.append(temp)\n",
        "\n",
        "    print('mean(Accuracy):', np.mean(Accuracy))\n",
        "    print('std(Accuracy):', np.std(Accuracy))\n",
        "    print('mean ± std(Accuracy):', np.round(np.mean(Accuracy), 2), \"+-\", np.round(np.std(Accuracy), 2))\n",
        "\n",
        "    for j in np.unique(y_test):\n",
        "        print('\\nclass:', j)\n",
        "        precision = []\n",
        "        recall = []\n",
        "        f1_score = []\n",
        "        for i in range(len(classification_report_dict)):\n",
        "            report = classification_report_dict[i]\n",
        "            precision.append(report[str(j)]['precision'])\n",
        "            recall.append(report[str(j)]['recall'])\n",
        "            f1_score.append(report[str(j)]['f1-score'])\n",
        "\n",
        "        print('p.mean(precision) \\t p.mean(recall) \\t p.mean(f1_score):')\n",
        "        print(np.mean(precision), \"\\t\", np.mean(recall), \"\\t\", np.mean(f1_score))\n",
        "        print('p.mean p.std(precision) \\tp.mean p.std(recall) \\tp.mean p.std(f1_score):')\n",
        "        print(np.round(np.mean(precision), 2), \"+-\", np.round(np.std(precision), 2))\n",
        "        print(np.round(np.mean(recall), 2), \"+-\", np.round(np.std(recall), 2))\n",
        "        print(np.round(np.mean(f1_score), 2), \"+-\", np.round(np.std(f1_score), 2))\n",
        "\n",
        "# Running experiments\n",
        "classification_report_dict = []\n",
        "for i in range(0, 5):\n",
        "    print(\"experiment running with random_state =\", i, \" ...\")\n",
        "    X_train, X_test, y_train, y_test = train_test_split(\n",
        "        mvts_1540, labels_1540, test_size=0.3, random_state=i, stratify=labels_1540)\n",
        "\n",
        "    trans = GetTransposed2D(X_train)\n",
        "    data2d = Make2D(trans)\n",
        "    scaler = GetStandardScaler(data2d)\n",
        "    X_train = transform_scale_data(X_train, scaler)\n",
        "    X_test = transform_scale_data(X_test, scaler)\n",
        "\n",
        "    report_dict = get_predictions_report(X_train, y_train, X_test, y_test, epochs=70 + 1, epoch_interval=10)\n",
        "    classification_report_dict.append(report_dict)\n",
        "\n",
        "doClassSpecificCalulcation(classification_report_dict, y_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I36ksutorbH9",
        "outputId": "60ce4e98-9a6b-4809-dc6f-eafcb01d6e61",
        "execution": {
          "iopub.status.busy": "2024-09-30T18:09:15.817085Z",
          "iopub.execute_input": "2024-09-30T18:09:15.817562Z",
          "iopub.status.idle": "2024-09-30T18:51:53.234174Z",
          "shell.execute_reply.started": "2024-09-30T18:09:15.817523Z",
          "shell.execute_reply": "2024-09-30T18:51:53.233224Z"
        },
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "experiment running with random_state = 0  ...\nNo checkpoint found at 'checkpoint.pth'\nepoch:  1    loss:  2.0356074630809675\nepoch:  11    loss:  2.187741487443107\nepoch:  21    loss:  1.9308126479632466\nepoch:  31    loss:  1.4519161270605268\nepoch:  41    loss:  1.2262435638258264\nepoch:  51    loss:  0.878808082255182\nepoch:  61    loss:  0.8099782023239983\nepoch:  71    loss:  0.722713287972027\nmaxAcc:  0.8138528138528138   max_acc_epoch: 70\nexperiment running with random_state = 1  ...\nLoading checkpoint 'checkpoint.pth'\nCheckpoint loaded: checkpoint.pth (epoch 70)\nepoch:  71    loss:  0.0034487528450923488\nmaxAcc:  0.9025974025974026   max_acc_epoch: 70\nexperiment running with random_state = 2  ...\nLoading checkpoint 'checkpoint.pth'\nCheckpoint loaded: checkpoint.pth (epoch 70)\nepoch:  71    loss:  0.006841330532272449\nmaxAcc:  0.8701298701298701   max_acc_epoch: 70\nexperiment running with random_state = 3  ...\nLoading checkpoint 'checkpoint.pth'\nCheckpoint loaded: checkpoint.pth (epoch 70)\nepoch:  71    loss:  0.005278738037952904\nmaxAcc:  0.8982683982683982   max_acc_epoch: 70\nexperiment running with random_state = 4  ...\nLoading checkpoint 'checkpoint.pth'\nCheckpoint loaded: checkpoint.pth (epoch 70)\nepoch:  71    loss:  0.06043221077425091\nmaxAcc:  0.8831168831168831   max_acc_epoch: 70\nmean(Accuracy): 0.8735930735930737\nstd(Accuracy): 0.032005368639436406\nmean ± std(Accuracy): 0.87 +- 0.03\n\nclass: 0\np.mean(precision) \t p.mean(recall) \t p.mean(f1_score):\n0.9632912207021228 \t 0.9809745127436281 \t 0.9717636763360223\np.mean p.std(precision) \tp.mean p.std(recall) \tp.mean p.std(f1_score):\n0.96 +- 0.02\n0.98 +- 0.02\n0.97 +- 0.01\n\nclass: 1\np.mean(precision) \t p.mean(recall) \t p.mean(f1_score):\n0.853646499455491 \t 0.8927886056971512 \t 0.8722379090138098\np.mean p.std(precision) \tp.mean p.std(recall) \tp.mean p.std(f1_score):\n0.85 +- 0.04\n0.89 +- 0.05\n0.87 +- 0.04\n\nclass: 2\np.mean(precision) \t p.mean(recall) \t p.mean(f1_score):\n0.8421189533583151 \t 0.7173163418290855 \t 0.7738777008558462\np.mean p.std(precision) \tp.mean p.std(recall) \tp.mean p.std(f1_score):\n0.84 +- 0.08\n0.72 +- 0.08\n0.77 +- 0.07\n\nclass: 3\np.mean(precision) \t p.mean(recall) \t p.mean(f1_score):\n0.8350380952380952 \t 0.9028035982008996 \t 0.8675200847532445\np.mean p.std(precision) \tp.mean p.std(recall) \tp.mean p.std(f1_score):\n0.84 +- 0.02\n0.9 +- 0.02\n0.87 +- 0.02\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Checkpoint saving/loading functions\n",
        "def save_checkpoint(model, optimizer, epoch, loss, filename='checkpoint.pth'):\n",
        "    if isinstance(model, nn.DataParallel):\n",
        "        model = model.module  # Access the underlying model\n",
        "    torch.save({\n",
        "        'epoch': epoch,\n",
        "        'model_state_dict': model.state_dict(),\n",
        "        'optimizer_state_dict': optimizer.state_dict(),\n",
        "        'loss': loss,\n",
        "    }, filename)\n",
        "\n",
        "def load_checkpoint(model, optimizer, filename='checkpoint.pth'):\n",
        "    if os.path.isfile(filename):\n",
        "        print(f\"Loading checkpoint '{filename}'\")\n",
        "        checkpoint = torch.load(filename)\n",
        "        if isinstance(model, nn.DataParallel):\n",
        "            model.module.load_state_dict(checkpoint['model_state_dict'])\n",
        "        else:\n",
        "            model.load_state_dict(checkpoint['model_state_dict'])\n",
        "        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
        "        epoch = checkpoint['epoch']\n",
        "        loss = checkpoint['loss']\n",
        "        print(f\"Checkpoint loaded: {filename} (epoch {epoch})\")\n",
        "        return epoch, loss\n",
        "    else:\n",
        "        print(f\"No checkpoint found at '{filename}'\")\n",
        "        return 0, None\n",
        "\n",
        "# Model parameters\n",
        "torch.manual_seed(0)\n",
        "\n",
        "NUM_NODES = 25\n",
        "INPUT_DIMS = 15\n",
        "NUM_TEMPORAL_SPLIT = 4\n",
        "GCN_HIDDEN_DIMS = 4\n",
        "NODE_EMB_DIMS = 4\n",
        "GRAPH_EMB_DIMS = NODE_EMB_DIMS\n",
        "WINDOW_EMB_DIMS = 64\n",
        "SEQUENCE_EMB_DIMS = 128\n",
        "NUM_CLASSES = 4\n",
        "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "# Function to get model parameters\n",
        "def get_model_params():\n",
        "    model = MVTS_GAT_BiLSTM(NUM_NODES, INPUT_DIMS, NUM_TEMPORAL_SPLIT, device, GCN_HIDDEN_DIMS, NODE_EMB_DIMS, GRAPH_EMB_DIMS, WINDOW_EMB_DIMS, SEQUENCE_EMB_DIMS, NUM_CLASSES).to(device).double()\n",
        "\n",
        "    # Wrap the model with DataParallel to use multiple GPUs\n",
        "    if torch.cuda.device_count() > 1:\n",
        "        print(f\"Using {torch.cuda.device_count()} GPUs for training.\")\n",
        "        model = nn.DataParallel(model)  # This will distribute model across multiple GPUs\n",
        "\n",
        "    loss_function = nn.NLLLoss()\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-3)\n",
        "    return model, loss_function, optimizer\n",
        "\n",
        "# Function to get accuracy report\n",
        "def get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    numTrain = Xtrain.shape[0]\n",
        "    numTest = Xtest.shape[0]\n",
        "    trainAdjs, trainNats = get_adjs_nats(Xtrain, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "    testAdjs, testNats = get_adjs_nats(Xtest, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "\n",
        "    model, loss_function, optimizer = get_model_params()\n",
        "\n",
        "    # Load checkpoint\n",
        "    start_epoch, _ = load_checkpoint(model, optimizer)\n",
        "\n",
        "    maxAcc = 0\n",
        "    max_classification_report_dict = 0\n",
        "    max_acc_epoch = 0\n",
        "\n",
        "    for epoch in range(start_epoch, epochs):  # Start from loaded epoch\n",
        "        for i in range(numTrain):\n",
        "            model.zero_grad()\n",
        "            class_scores = model(trainAdjs[i], trainNats[i])\n",
        "            target = torch.from_numpy(np.array([ytrain[i]])).to(device)\n",
        "            loss = loss_function(class_scores, target)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "        if epoch % epoch_interval == 0:\n",
        "            print(\"epoch: \", epoch + 1, \"   loss: \", loss.item())\n",
        "            # Save checkpoint\n",
        "            save_checkpoint(model, optimizer, epoch, loss.item(), filename='checkpoint.pth')\n",
        "\n",
        "    with torch.no_grad():\n",
        "        numCorrect = 0\n",
        "        predictedLabel = []\n",
        "        for i in range(numTest):\n",
        "            test_class_scores = model(testAdjs[i], testNats[i])\n",
        "            class_prediction = torch.argmax(test_class_scores, dim=-1)\n",
        "            predictedLabel.append(class_prediction[0].cpu().numpy())\n",
        "            if class_prediction == ytest[i]:\n",
        "                numCorrect += 1\n",
        "\n",
        "        acc = numCorrect / numTest\n",
        "        if acc > maxAcc:\n",
        "            maxAcc = acc\n",
        "            max_acc_epoch = epoch\n",
        "            max_classification_report_dict = metrics.classification_report(ytest, predictedLabel, digits=3, output_dict=True)\n",
        "\n",
        "    return maxAcc, max_acc_epoch, max_classification_report_dict\n",
        "\n",
        "# Function to get predictions report\n",
        "def get_predictions_report(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    maxAcc, max_acc_epoch, report_dict = get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs=epochs, epoch_interval=epoch_interval)\n",
        "    print('maxAcc: ', maxAcc, \"  max_acc_epoch:\", max_acc_epoch)\n",
        "    return report_dict\n",
        "\n",
        "# Function for class-specific calculations\n",
        "def doClassSpecificCalulcation(classification_report_dict, y_test):\n",
        "    Accuracy = []\n",
        "    for i in range(len(classification_report_dict)):\n",
        "        report = classification_report_dict[i]\n",
        "        temp = report['accuracy']\n",
        "        Accuracy.append(temp)\n",
        "\n",
        "    print('mean(Accuracy):', np.mean(Accuracy))\n",
        "    print('std(Accuracy):', np.std(Accuracy))\n",
        "    print('mean ± std(Accuracy):', np.round(np.mean(Accuracy), 2), \"+-\", np.round(np.std(Accuracy), 2))\n",
        "\n",
        "    for j in np.unique(y_test):\n",
        "        print('\\nclass:', j)\n",
        "        precision = []\n",
        "        recall = []\n",
        "        f1_score = []\n",
        "        for i in range(len(classification_report_dict)):\n",
        "            report = classification_report_dict[i]\n",
        "            precision.append(report[str(j)]['precision'])\n",
        "            recall.append(report[str(j)]['recall'])\n",
        "            f1_score.append(report[str(j)]['f1-score'])\n",
        "\n",
        "        print('p.mean(precision) \\t p.mean(recall) \\t p.mean(f1_score):')\n",
        "        print(np.mean(precision), \"\\t\", np.mean(recall), \"\\t\", np.mean(f1_score))\n",
        "        print('p.mean p.std(precision) \\tp.mean p.std(recall) \\tp.mean p.std(f1_score):')\n",
        "        print(np.round(np.mean(precision), 2), \"+-\", np.round(np.std(precision), 2))\n",
        "        print(np.round(np.mean(recall), 2), \"+-\", np.round(np.std(recall), 2))\n",
        "        print(np.round(np.mean(f1_score), 2), \"+-\", np.round(np.std(f1_score), 2))\n",
        "\n",
        "# Running experiments\n",
        "classification_report_dict = []\n",
        "for i in range(0, 5):\n",
        "    print(\"experiment running with random_state =\", i, \" ...\")\n",
        "    X_train, X_test, y_train, y_test = train_test_split(\n",
        "        mvts_1540, labels_1540, test_size=0.3, random_state=i, stratify=labels_1540)\n",
        "\n",
        "    trans = GetTransposed2D(X_train)\n",
        "    data2d = Make2D(trans)\n",
        "    scaler = GetStandardScaler(data2d)\n",
        "    X_train = transform_scale_data(X_train, scaler)\n",
        "    X_test = transform_scale_data(X_test, scaler)\n",
        "\n",
        "    report_dict = get_predictions_report(X_train, y_train, X_test, y_test, epochs=70 + 1, epoch_interval=10)\n",
        "    classification_report_dict.append(report_dict)\n",
        "\n",
        "doClassSpecificCalulcation(classification_report_dict, y_test)\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-09-30T18:08:08.583963Z",
          "iopub.execute_input": "2024-09-30T18:08:08.584706Z",
          "iopub.status.idle": "2024-09-30T18:08:15.544691Z",
          "shell.execute_reply.started": "2024-09-30T18:08:08.584661Z",
          "shell.execute_reply": "2024-09-30T18:08:15.54314Z"
        },
        "trusted": true,
        "id": "nXIuSIHJUNkv",
        "outputId": "d97d346a-5701-4db5-a673-7382b0b0acba"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "experiment running with random_state = 0  ...\nUsing 2 GPUs for training.\nNo checkpoint found at 'checkpoint.pth'\n",
          "output_type": "stream"
        },
        {
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[9], line 160\u001b[0m\n\u001b[1;32m    157\u001b[0m     X_train \u001b[38;5;241m=\u001b[39m transform_scale_data(X_train, scaler)\n\u001b[1;32m    158\u001b[0m     X_test \u001b[38;5;241m=\u001b[39m transform_scale_data(X_test, scaler)\n\u001b[0;32m--> 160\u001b[0m     report_dict \u001b[38;5;241m=\u001b[39m \u001b[43mget_predictions_report\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m70\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepoch_interval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     classification_report_dict\u001b[38;5;241m.\u001b[39mappend(report_dict)\n\u001b[1;32m    163\u001b[0m doClassSpecificCalulcation(classification_report_dict, y_test)\n",
            "Cell \u001b[0;32mIn[9], line 113\u001b[0m, in \u001b[0;36mget_predictions_report\u001b[0;34m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_predictions_report\u001b[39m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n\u001b[0;32m--> 113\u001b[0m     maxAcc, max_acc_epoch, report_dict \u001b[38;5;241m=\u001b[39m \u001b[43mget_accuracy_report_by_running_epochs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mXtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mytrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mXtest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mytest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepoch_interval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mepoch_interval\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    114\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmaxAcc: \u001b[39m\u001b[38;5;124m'\u001b[39m, maxAcc, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m  max_acc_epoch:\u001b[39m\u001b[38;5;124m\"\u001b[39m, max_acc_epoch)\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m report_dict\n",
            "Cell \u001b[0;32mIn[9], line 82\u001b[0m, in \u001b[0;36mget_accuracy_report_by_running_epochs\u001b[0;34m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval)\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(numTrain):\n\u001b[1;32m     81\u001b[0m     model\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m---> 82\u001b[0m     class_scores \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrainAdjs\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrainNats\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     83\u001b[0m     target \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mfrom_numpy(np\u001b[38;5;241m.\u001b[39marray([ytrain[i]]))\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     84\u001b[0m     loss \u001b[38;5;241m=\u001b[39m loss_function(class_scores, target)\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py:186\u001b[0m, in \u001b[0;36mDataParallel.forward\u001b[0;34m(self, *inputs, **kwargs)\u001b[0m\n\u001b[1;32m    184\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodule(\u001b[38;5;241m*\u001b[39minputs[\u001b[38;5;241m0\u001b[39m], \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mmodule_kwargs[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m    185\u001b[0m replicas \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreplicate(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodule, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdevice_ids[:\u001b[38;5;28mlen\u001b[39m(inputs)])\n\u001b[0;32m--> 186\u001b[0m outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparallel_apply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mreplicas\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodule_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgather(outputs, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moutput_device)\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py:201\u001b[0m, in \u001b[0;36mDataParallel.parallel_apply\u001b[0;34m(self, replicas, inputs, kwargs)\u001b[0m\n\u001b[1;32m    200\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mparallel_apply\u001b[39m(\u001b[38;5;28mself\u001b[39m, replicas: Sequence[T], inputs: Sequence[Any], kwargs: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m List[Any]:\n\u001b[0;32m--> 201\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mparallel_apply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mreplicas\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdevice_ids\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mreplicas\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py:108\u001b[0m, in \u001b[0;36mparallel_apply\u001b[0;34m(modules, inputs, kwargs_tup, devices)\u001b[0m\n\u001b[1;32m    106\u001b[0m     output \u001b[38;5;241m=\u001b[39m results[i]\n\u001b[1;32m    107\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(output, ExceptionWrapper):\n\u001b[0;32m--> 108\u001b[0m         \u001b[43moutput\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreraise\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    109\u001b[0m     outputs\u001b[38;5;241m.\u001b[39mappend(output)\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m outputs\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/_utils.py:706\u001b[0m, in \u001b[0;36mExceptionWrapper.reraise\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    702\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m    703\u001b[0m     \u001b[38;5;66;03m# If the exception takes multiple arguments, don't try to\u001b[39;00m\n\u001b[1;32m    704\u001b[0m     \u001b[38;5;66;03m# instantiate since we don't know how to\u001b[39;00m\n\u001b[1;32m    705\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m--> 706\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception\n",
            "\u001b[0;31mRuntimeError\u001b[0m: Caught RuntimeError in replica 1 on device 1.\nOriginal Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py\", line 83, in _worker\n    output = module(*input, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/tmp/ipykernel_30/449817226.py\", line 47, in forward\n    small_seq_out, _ = self.smt2vector(smvts.view(len(smvts), 1, -1))  # Input: [15, 25], Output: [15, 256]\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/rnn.py\", line 917, in forward\n    result = _VF.lstm(input, hx, self._flat_weights, self.bias, self.num_layers,\nRuntimeError: Input and parameter tensors are not at the same device, found input tensor at cuda:0 and parameter tensor at cuda:1\n"
          ],
          "ename": "RuntimeError",
          "evalue": "Caught RuntimeError in replica 1 on device 1.\nOriginal Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py\", line 83, in _worker\n    output = module(*input, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/tmp/ipykernel_30/449817226.py\", line 47, in forward\n    small_seq_out, _ = self.smt2vector(smvts.view(len(smvts), 1, -1))  # Input: [15, 25], Output: [15, 256]\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/rnn.py\", line 917, in forward\n    result = _VF.lstm(input, hx, self._flat_weights, self.bias, self.num_layers,\nRuntimeError: Input and parameter tensors are not at the same device, found input tensor at cuda:0 and parameter tensor at cuda:1\n",
          "output_type": "error"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Checkpoint saving/loading functions\n",
        "def save_checkpoint(model, optimizer, epoch, loss, filename='checkpoint.pth'):\n",
        "    torch.save({\n",
        "        'epoch': epoch,\n",
        "        'model_state_dict': model.state_dict(),\n",
        "        'optimizer_state_dict': optimizer.state_dict(),\n",
        "        'loss': loss,\n",
        "    }, filename)\n",
        "\n",
        "def load_checkpoint(model, optimizer, filename='checkpoint.pth'):\n",
        "    if os.path.isfile(filename):\n",
        "        print(f\"Loading checkpoint '{filename}'\")\n",
        "        checkpoint = torch.load(filename)\n",
        "        model.load_state_dict(checkpoint['model_state_dict'])\n",
        "        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
        "        epoch = checkpoint['epoch']\n",
        "        loss = checkpoint['loss']\n",
        "        print(f\"Checkpoint loaded: {filename} (epoch {epoch})\")\n",
        "        return epoch, loss\n",
        "    else:\n",
        "        print(f\"No checkpoint found at '{filename}'\")\n",
        "        return 0, None\n",
        "\n",
        "# Model parameters\n",
        "torch.manual_seed(0)\n",
        "\n",
        "NUM_NODES = 25\n",
        "INPUT_DIMS = 15\n",
        "NUM_TEMPORAL_SPLIT = 4\n",
        "GCN_HIDDEN_DIMS = 4\n",
        "NODE_EMB_DIMS = 4\n",
        "GRAPH_EMB_DIMS = NODE_EMB_DIMS\n",
        "WINDOW_EMB_DIMS = 64\n",
        "SEQUENCE_EMB_DIMS = 128\n",
        "NUM_CLASSES = 4\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "# Function to get model parameters\n",
        "def get_model_params():\n",
        "    model = MVTS_TGCN_GAT(NUM_NODES, INPUT_DIMS, NUM_TEMPORAL_SPLIT, device, GCN_HIDDEN_DIMS, NODE_EMB_DIMS, GRAPH_EMB_DIMS, WINDOW_EMB_DIMS, SEQUENCE_EMB_DIMS, NUM_CLASSES).to(device).double()\n",
        "    model = nn.DataParallel(model)  # Wrap model for DataParallel\n",
        "    loss_function = nn.NLLLoss()\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-3)\n",
        "    return model, loss_function, optimizer\n",
        "\n",
        "# Function to get accuracy report\n",
        "def get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    numTrain = Xtrain.shape[0]\n",
        "    numTest = Xtest.shape[0]\n",
        "    trainAdjs, trainNats = get_adjs_nats(Xtrain, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "    testAdjs, testNats = get_adjs_nats(Xtest, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "\n",
        "    model, loss_function, optimizer = get_model_params()\n",
        "\n",
        "    # Load checkpoint\n",
        "    start_epoch, _ = load_checkpoint(model, optimizer)\n",
        "\n",
        "    maxAcc = 0\n",
        "    max_classification_report_dict = 0\n",
        "    max_acc_epoch = 0\n",
        "\n",
        "    for epoch in range(start_epoch, epochs):  # Start from loaded epoch\n",
        "        for i in range(numTrain):\n",
        "            model.zero_grad()\n",
        "            # Convert trainNats[i] to a tensor before moving to device\n",
        "            nats_tensor = torch.from_numpy(trainNats[i]).to(device)\n",
        "            class_scores = model(trainAdjs[i], nats_tensor)  # Ensure inputs are on the right device\n",
        "            target = torch.from_numpy(np.array([ytrain[i]])).to(device)  # Move target to the right device\n",
        "            loss = loss_function(class_scores, target)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "        if epoch % epoch_interval == 0:\n",
        "            print(\"epoch: \", epoch + 1, \"   loss: \", loss.item())\n",
        "            # Save checkpoint\n",
        "            save_checkpoint(model, optimizer, epoch, loss.item(), filename='checkpoint.pth')\n",
        "\n",
        "    with torch.no_grad():\n",
        "        numCorrect = 0\n",
        "        predictedLabel = []\n",
        "        for i in range(numTest):\n",
        "            test_class_scores = model(testAdjs[i].to(device), testNats[i].to(device))  # Move inputs to device\n",
        "            class_prediction = torch.argmax(test_class_scores, dim=-1)\n",
        "            predictedLabel.append(class_prediction[0].cpu().numpy())\n",
        "            if class_prediction == ytest[i]:\n",
        "                numCorrect += 1\n",
        "\n",
        "        acc = numCorrect / numTest\n",
        "        if acc > maxAcc:\n",
        "            maxAcc = acc\n",
        "            max_acc_epoch = epoch\n",
        "            max_classification_report_dict = metrics.classification_report(ytest, predictedLabel, digits=3, output_dict=True)\n",
        "\n",
        "    return maxAcc, max_acc_epoch, max_classification_report_dict\n",
        "\n",
        "# Function to get predictions report\n",
        "def get_predictions_report(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    maxAcc, max_acc_epoch, report_dict = get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs=epochs, epoch_interval=epoch_interval)\n",
        "    print('maxAcc: ', maxAcc, \"  max_acc_epoch:\", max_acc_epoch)\n",
        "    return report_dict\n",
        "\n",
        "# Function for class-specific calculations\n",
        "def doClassSpecificCalulcation(classification_report_dict, y_test):\n",
        "    Accuracy = []\n",
        "    for i in range(len(classification_report_dict)):\n",
        "        report = classification_report_dict[i]\n",
        "        temp = report['accuracy']\n",
        "        Accuracy.append(temp)\n",
        "\n",
        "    print('mean(Accuracy):', np.mean(Accuracy))\n",
        "    print('std(Accuracy):', np.std(Accuracy))\n",
        "    print('mean ± std(Accuracy):', np.round(np.mean(Accuracy), 2), \"+-\", np.round(np.std(Accuracy), 2))\n",
        "\n",
        "    for j in np.unique(y_test):\n",
        "        print('\\nclass:', j)\n",
        "        precision = []\n",
        "        recall = []\n",
        "        f1_score = []\n",
        "        for i in range(len(classification_report_dict)):\n",
        "            report = classification_report_dict[i]\n",
        "            precision.append(report[str(j)]['precision'])\n",
        "            recall.append(report[str(j)]['recall'])\n",
        "            f1_score.append(report[str(j)]['f1-score'])\n",
        "\n",
        "        print('p.mean(precision) \\t p.mean(recall) \\t p.mean(f1_score):')\n",
        "        print(np.mean(precision), \"\\t\", np.mean(recall), \"\\t\", np.mean(f1_score))\n",
        "        print('p.mean p.std(precision) \\tp.mean p.std(recall) \\tp.mean p.std(f1_score):')\n",
        "        print(np.round(np.mean(precision), 2), \"+-\", np.round(np.std(precision), 2))\n",
        "        print(np.round(np.mean(recall), 2), \"+-\", np.round(np.std(recall), 2))\n",
        "        print(np.round(np.mean(f1_score), 2), \"+-\", np.round(np.std(f1_score), 2))\n",
        "\n",
        "# Running experiments\n",
        "classification_report_dict = []\n",
        "for i in range(0, 5):\n",
        "    print(\"experiment running with random_state =\", i, \" ...\")\n",
        "    X_train, X_test, y_train, y_test = train_test_split(\n",
        "        mvts_1540, labels_1540, test_size=0.3, random_state=i, stratify=labels_1540)\n",
        "\n",
        "    trans = GetTransposed2D(X_train)\n",
        "    data2d = Make2D(trans)\n",
        "    scaler = GetStandardScaler(data2d)\n",
        "    X_train = transform_scale_data(X_train, scaler)\n",
        "    X_test = transform_scale_data(X_test, scaler)\n",
        "\n",
        "    report_dict = get_predictions_report(X_train, y_train, X_test, y_test, epochs=70 + 1, epoch_interval=10)\n",
        "    classification_report_dict.append(report_dict)\n",
        "\n",
        "doClassSpecificCalulcation(classification_report_dict, y_test)\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-09-30T11:19:57.311111Z",
          "iopub.execute_input": "2024-09-30T11:19:57.311709Z",
          "iopub.status.idle": "2024-09-30T11:20:02.895073Z",
          "shell.execute_reply.started": "2024-09-30T11:19:57.311664Z",
          "shell.execute_reply": "2024-09-30T11:20:02.893713Z"
        },
        "trusted": true,
        "id": "-VjmAi70UNkv",
        "outputId": "c67979e3-0411-4888-c057-2cf4bb4bd523"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "experiment running with random_state = 0  ...\nNo checkpoint found at 'checkpoint.pth'\n",
          "output_type": "stream"
        },
        {
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[15], line 152\u001b[0m\n\u001b[1;32m    149\u001b[0m     X_train \u001b[38;5;241m=\u001b[39m transform_scale_data(X_train, scaler)\n\u001b[1;32m    150\u001b[0m     X_test \u001b[38;5;241m=\u001b[39m transform_scale_data(X_test, scaler)\n\u001b[0;32m--> 152\u001b[0m     report_dict \u001b[38;5;241m=\u001b[39m \u001b[43mget_predictions_report\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m70\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepoch_interval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    153\u001b[0m     classification_report_dict\u001b[38;5;241m.\u001b[39mappend(report_dict)\n\u001b[1;32m    155\u001b[0m doClassSpecificCalulcation(classification_report_dict, y_test)\n",
            "Cell \u001b[0;32mIn[15], line 105\u001b[0m, in \u001b[0;36mget_predictions_report\u001b[0;34m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval)\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_predictions_report\u001b[39m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n\u001b[0;32m--> 105\u001b[0m     maxAcc, max_acc_epoch, report_dict \u001b[38;5;241m=\u001b[39m \u001b[43mget_accuracy_report_by_running_epochs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mXtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mytrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mXtest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mytest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepoch_interval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mepoch_interval\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    106\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmaxAcc: \u001b[39m\u001b[38;5;124m'\u001b[39m, maxAcc, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m  max_acc_epoch:\u001b[39m\u001b[38;5;124m\"\u001b[39m, max_acc_epoch)\n\u001b[1;32m    107\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m report_dict\n",
            "Cell \u001b[0;32mIn[15], line 74\u001b[0m, in \u001b[0;36mget_accuracy_report_by_running_epochs\u001b[0;34m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval)\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[38;5;66;03m# Convert trainNats[i] to a tensor before moving to device\u001b[39;00m\n\u001b[1;32m     73\u001b[0m nats_tensor \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mfrom_numpy(trainNats[i])\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[0;32m---> 74\u001b[0m class_scores \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrainAdjs\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnats_tensor\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Ensure inputs are on the right device\u001b[39;00m\n\u001b[1;32m     75\u001b[0m target \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mfrom_numpy(np\u001b[38;5;241m.\u001b[39marray([ytrain[i]]))\u001b[38;5;241m.\u001b[39mto(device)  \u001b[38;5;66;03m# Move target to the right device\u001b[39;00m\n\u001b[1;32m     76\u001b[0m loss \u001b[38;5;241m=\u001b[39m loss_function(class_scores, target)\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py:186\u001b[0m, in \u001b[0;36mDataParallel.forward\u001b[0;34m(self, *inputs, **kwargs)\u001b[0m\n\u001b[1;32m    184\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodule(\u001b[38;5;241m*\u001b[39minputs[\u001b[38;5;241m0\u001b[39m], \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mmodule_kwargs[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m    185\u001b[0m replicas \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreplicate(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodule, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdevice_ids[:\u001b[38;5;28mlen\u001b[39m(inputs)])\n\u001b[0;32m--> 186\u001b[0m outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparallel_apply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mreplicas\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodule_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgather(outputs, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moutput_device)\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py:201\u001b[0m, in \u001b[0;36mDataParallel.parallel_apply\u001b[0;34m(self, replicas, inputs, kwargs)\u001b[0m\n\u001b[1;32m    200\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mparallel_apply\u001b[39m(\u001b[38;5;28mself\u001b[39m, replicas: Sequence[T], inputs: Sequence[Any], kwargs: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m List[Any]:\n\u001b[0;32m--> 201\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mparallel_apply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mreplicas\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdevice_ids\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mreplicas\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py:108\u001b[0m, in \u001b[0;36mparallel_apply\u001b[0;34m(modules, inputs, kwargs_tup, devices)\u001b[0m\n\u001b[1;32m    106\u001b[0m     output \u001b[38;5;241m=\u001b[39m results[i]\n\u001b[1;32m    107\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(output, ExceptionWrapper):\n\u001b[0;32m--> 108\u001b[0m         \u001b[43moutput\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreraise\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    109\u001b[0m     outputs\u001b[38;5;241m.\u001b[39mappend(output)\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m outputs\n",
            "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/_utils.py:706\u001b[0m, in \u001b[0;36mExceptionWrapper.reraise\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    702\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m    703\u001b[0m     \u001b[38;5;66;03m# If the exception takes multiple arguments, don't try to\u001b[39;00m\n\u001b[1;32m    704\u001b[0m     \u001b[38;5;66;03m# instantiate since we don't know how to\u001b[39;00m\n\u001b[1;32m    705\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m--> 706\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception\n",
            "\u001b[0;31mTypeError\u001b[0m: Caught TypeError in replica 0 on device 0.\nOriginal Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py\", line 83, in _worker\n    output = module(*input, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/tmp/ipykernel_30/3942160203.py\", line 48, in forward\n    node_attributes_tensor = torch.from_numpy(node_att).to(self.device)  # [25, 15]\nTypeError: expected np.ndarray (got Tensor)\n"
          ],
          "ename": "TypeError",
          "evalue": "Caught TypeError in replica 0 on device 0.\nOriginal Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py\", line 83, in _worker\n    output = module(*input, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1553, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1562, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/tmp/ipykernel_30/3942160203.py\", line 48, in forward\n    node_attributes_tensor = torch.from_numpy(node_att).to(self.device)  # [25, 15]\nTypeError: expected np.ndarray (got Tensor)\n",
          "output_type": "error"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "additional info\n"
      ],
      "metadata": {
        "id": "3jrhbIqcUQdu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Checkpoint saving/loading functions\n",
        "def save_checkpoint(model, optimizer, epoch, loss, filename='checkpoint.pth'):\n",
        "    torch.save({\n",
        "        'epoch': epoch,\n",
        "        'model_state_dict': model.state_dict(),\n",
        "        'optimizer_state_dict': optimizer.state_dict(),\n",
        "        'loss': loss,\n",
        "    }, filename)\n",
        "\n",
        "def load_checkpoint(model, optimizer, filename='checkpoint.pth'):\n",
        "    if os.path.isfile(filename):\n",
        "        print(f\"Loading checkpoint '{filename}'\")\n",
        "        checkpoint = torch.load(filename)\n",
        "        model.load_state_dict(checkpoint['model_state_dict'])\n",
        "        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
        "        epoch = checkpoint['epoch']\n",
        "        loss = checkpoint['loss']\n",
        "        print(f\"Checkpoint loaded: {filename} (epoch {epoch})\")\n",
        "        return epoch, loss\n",
        "    else:\n",
        "        print(f\"No checkpoint found at '{filename}'\")\n",
        "        return 0, None\n",
        "\n",
        "# Model parameters\n",
        "torch.manual_seed(0)\n",
        "\n",
        "NUM_NODES = 25\n",
        "INPUT_DIMS = 15\n",
        "NUM_TEMPORAL_SPLIT = 4\n",
        "GCN_HIDDEN_DIMS = 4\n",
        "NODE_EMB_DIMS = 4\n",
        "GRAPH_EMB_DIMS = NODE_EMB_DIMS\n",
        "WINDOW_EMB_DIMS = 64\n",
        "SEQUENCE_EMB_DIMS = 128\n",
        "NUM_CLASSES = 4\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "# Function to get model parameters\n",
        "def get_model_params():\n",
        "    model = MVTS_GCN_RNN(NUM_NODES, INPUT_DIMS, NUM_TEMPORAL_SPLIT, device, GCN_HIDDEN_DIMS, NODE_EMB_DIMS, GRAPH_EMB_DIMS, WINDOW_EMB_DIMS, SEQUENCE_EMB_DIMS, NUM_CLASSES).to(device).double()\n",
        "    loss_function = nn.NLLLoss()\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-3)\n",
        "    return model, loss_function, optimizer\n",
        "\n",
        "# Function to get accuracy report and confusion matrix\n",
        "def get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    numTrain = Xtrain.shape[0]\n",
        "    numTest = Xtest.shape[0]\n",
        "    trainAdjs, trainNats = get_adjs_nats(Xtrain, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "    testAdjs, testNats = get_adjs_nats(Xtest, num_temporal_split=NUM_TEMPORAL_SPLIT, th=0)\n",
        "\n",
        "    model, loss_function, optimizer = get_model_params()\n",
        "\n",
        "    # Load checkpoint\n",
        "    start_epoch, _ = load_checkpoint(model, optimizer)\n",
        "\n",
        "    maxAcc = 0\n",
        "    max_classification_report_dict = 0\n",
        "    max_acc_epoch = 0\n",
        "    y_pred = []\n",
        "\n",
        "    for epoch in range(start_epoch, epochs):  # Start from loaded epoch\n",
        "        for i in range(numTrain):\n",
        "            model.zero_grad()\n",
        "            class_scores = model(trainAdjs[i], trainNats[i])\n",
        "            target = torch.from_numpy(np.array([ytrain[i]]))\n",
        "            target = target.to(device)\n",
        "            loss = loss_function(class_scores, target)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "        if epoch % epoch_interval == 0:\n",
        "            print(\"epoch: \", epoch + 1, \"   loss: \", loss.item())\n",
        "            # Save checkpoint\n",
        "            save_checkpoint(model, optimizer, epoch, loss.item(), filename='checkpoint.pth')\n",
        "\n",
        "    with torch.no_grad():\n",
        "        numCorrect = 0\n",
        "        predictedLabel = []\n",
        "        for i in range(numTest):\n",
        "            test_class_scores = model(testAdjs[i], testNats[i])\n",
        "            class_prediction = torch.argmax(test_class_scores, dim=-1)\n",
        "            predictedLabel.append(class_prediction[0].cpu().numpy())\n",
        "            if class_prediction == ytest[i]:\n",
        "                numCorrect += 1\n",
        "\n",
        "        acc = numCorrect / numTest\n",
        "        y_pred = np.array(predictedLabel)\n",
        "\n",
        "        if acc > maxAcc:\n",
        "            maxAcc = acc\n",
        "            max_acc_epoch = epoch\n",
        "            max_classification_report_dict = metrics.classification_report(ytest, y_pred, digits=3, output_dict=True)\n",
        "\n",
        "        # Generate confusion matrix\n",
        "        conf_matrix = confusion_matrix(ytest, y_pred)\n",
        "\n",
        "    return maxAcc, max_acc_epoch, max_classification_report_dict, y_pred, conf_matrix\n",
        "\n",
        "# Function to get predictions report\n",
        "def get_predictions_report(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval):\n",
        "    maxAcc, max_acc_epoch, report_dict, y_pred, conf_matrix = get_accuracy_report_by_running_epochs(Xtrain, ytrain, Xtest, ytest, epochs=epochs, epoch_interval=epoch_interval)\n",
        "    print('maxAcc: ', maxAcc, \"  max_acc_epoch:\", max_acc_epoch)\n",
        "    print(\"Confusion Matrix:\\n\", conf_matrix)\n",
        "    return report_dict, y_pred, conf_matrix\n",
        "\n",
        "# Function for class-specific calculations\n",
        "def doClassSpecificCalulcation(classification_report_dict, y_test):\n",
        "    Accuracy = []\n",
        "    for i in range(len(classification_report_dict)):\n",
        "        report = classification_report_dict[i]\n",
        "        temp = report['accuracy']\n",
        "        Accuracy.append(temp)\n",
        "\n",
        "    print('mean(Accuracy):', np.mean(Accuracy))\n",
        "    print('std(Accuracy):', np.std(Accuracy))\n",
        "    print('mean ± std(Accuracy):', np.round(np.mean(Accuracy), 2), \"+-\", np.round(np.std(Accuracy), 2))\n",
        "\n",
        "    for j in np.unique(y_test):\n",
        "        print('\\nclass:', j)\n",
        "        precision = []\n",
        "        recall = []\n",
        "        f1_score = []\n",
        "        for i in range(len(classification_report_dict)):\n",
        "            report = classification_report_dict[i]\n",
        "            precision.append(report[str(j)]['precision'])\n",
        "            recall.append(report[str(j)]['recall'])\n",
        "            f1_score.append(report[str(j)]['f1-score'])\n",
        "\n",
        "        print('p.mean(precision) \\t p.mean(recall) \\t p.mean(f1_score):')\n",
        "        print(np.mean(precision), \"\\t\", np.mean(recall), \"\\t\", np.mean(f1_score))\n",
        "        print('p.mean p.std(precision) \\tp.mean p.std(recall) \\tp.mean p.std(f1_score):')\n",
        "        print(np.round(np.mean(precision), 2), \"+-\", np.round(np.std(precision), 2))\n",
        "        print(np.round(np.mean(recall), 2), \"+-\", np.round(np.std(recall), 2))\n",
        "        print(np.round(np.mean(f1_score), 2), \"+-\", np.round(np.std(f1_score), 2))\n",
        "\n",
        "# Running experiments\n",
        "classification_report_dict = []\n",
        "y_pred_all = []\n",
        "conf_matrix_all = []\n",
        "for i in range(0, 5):\n",
        "    print(\"experiment running with random_state =\", i, \" ...\")\n",
        "    X_train, X_test, y_train, y_test = train_test_split(\n",
        "        mvts_1540, labels_1540, test_size=0.3, random_state=i, stratify=labels_1540)\n",
        "\n",
        "    trans = GetTransposed2D(X_train)\n",
        "    data2d = Make2D(trans)\n",
        "    scaler = GetStandardScaler(data2d)\n",
        "    X_train = transform_scale_data(X_train, scaler)\n",
        "    X_test = transform_scale_data(X_test, scaler)\n",
        "\n",
        "    report_dict, y_pred, conf_matrix = get_predictions_report(X_train, y_train, X_test, y_test, epochs=70 + 1, epoch_interval=10)\n",
        "    classification_report_dict.append(report_dict)\n",
        "    y_pred_all.append(y_pred)\n",
        "    conf_matrix_all.append(conf_matrix)\n",
        "\n",
        "# Call class-specific calculation\n",
        "doClassSpecificCalulcation(classification_report_dict, y_test)\n",
        "\n",
        "# Display predictions and confusion matrices\n",
        "for i, conf_matrix in enumerate(conf_matrix_all):\n",
        "    print(f\"\\nConfusion Matrix for experiment {i}:\")\n",
        "    print(conf_matrix)\n",
        "\n",
        "for i, y_pred in enumerate(y_pred_all):\n",
        "    print(f\"\\ny_pred for experiment {i}:\")\n",
        "    print(y_pred)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "Q_4vmh2aUS0O",
        "outputId": "6d93e729-09b6-40f2-ea50-d85dafe03798"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "experiment running with random_state = 0  ...\n\nNo checkpoint found at 'checkpoint.pth'\n"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-8a23fc846d64>\u001b[0m in \u001b[0;36m<cell line: 149>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    158\u001b[0m     \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform_scale_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 160\u001b[0;31m     \u001b[0mreport_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconf_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_predictions_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m70\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    161\u001b[0m     \u001b[0mclassification_report_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreport_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m     \u001b[0my_pred_all\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-21-8a23fc846d64>\u001b[0m in \u001b[0;36mget_predictions_report\u001b[0;34m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval)\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;31m# Function to get predictions report\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_predictions_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_interval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 110\u001b[0;31m     \u001b[0mmaxAcc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_acc_epoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreport_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconf_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_accuracy_report_by_running_epochs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepoch_interval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'maxAcc: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxAcc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"  max_acc_epoch:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_acc_epoch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Confusion Matrix:\\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconf_matrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-21-8a23fc846d64>\u001b[0m in \u001b[0;36mget_accuracy_report_by_running_epochs\u001b[0;34m(Xtrain, ytrain, Xtest, ytest, epochs, epoch_interval)\u001b[0m\n\u001b[1;32m     75\u001b[0m             \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclass_scores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m             \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m             \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    519\u001b[0m                 \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    520\u001b[0m             )\n\u001b[0;32m--> 521\u001b[0;31m         torch.autograd.backward(\n\u001b[0m\u001b[1;32m    522\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    523\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[0;31m# some Python versions print out the first line of a multi-line function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m     \u001b[0;31m# calls in the traceback and some print out the last line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 289\u001b[0;31m     _engine_run_backward(\n\u001b[0m\u001b[1;32m    290\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m         \u001b[0mgrad_tensors_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/autograd/graph.py\u001b[0m in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    767\u001b[0m         \u001b[0munregister_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_register_logging_hooks_on_whole_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    768\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 769\u001b[0;31m         return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n\u001b[0m\u001b[1;32m    770\u001b[0m             \u001b[0mt_outputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    771\u001b[0m         )  # Calls into the C++ engine to run the backward pass\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"hi\")"
      ],
      "metadata": {
        "id": "MXB-n9t3qXEm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e35a989-4b5a-4a44-c2fa-40b2c6fb266f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "hi\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\"\"\"t-SNE\"\"\"\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.manifold import TSNE\n",
        "\n",
        "def show_tsne_representation(train_tsne, y):\n",
        "    xe1 = train_tsne[:,0]\n",
        "    xe2 = train_tsne[:,1]\n",
        "\n",
        "    df = pd.DataFrame({'t-SNE dimension 1':xe1, 't-SNE dimension 2':xe2, 'Class':y})\n",
        "    df = df.sort_values(by=['Class'], ascending=True)\n",
        "\n",
        "    legend_map = {0: 'X',\n",
        "                  1: 'M',\n",
        "                  2: 'BC',\n",
        "                  3: 'Q'}\n",
        "    fig = plt.figure(figsize=(11, 11))\n",
        "    sns.set(font_scale=2)\n",
        "    ax = sns.scatterplot(df['t-SNE dimension 1'], df['t-SNE dimension 2'], hue=df['Class'].map(legend_map),\n",
        "                         palette=['red', 'orange', 'blue', 'green'], legend='full')\n",
        "    plt.show()\n",
        "\n",
        "def get_all_train_softs_by_running_epochs(Xtrain, ytrain, epochs, epoch_interval):\n",
        "    numTrain = Xtrain.shape[0]\n",
        "    trainAdjs, trainNats = get_adjs_nats(Xtrain, num_temporal_split = NUM_TEMPORAL_SPLIT, th = 0)\n",
        "    model, loss_function, optimizer = get_model_params()\n",
        "    for epoch in range(epochs):\n",
        "        for i in range(numTrain):#num_train\n",
        "            model.zero_grad()\n",
        "            class_scores = model(trainAdjs[i], trainNats[i])\n",
        "            target = torch.from_numpy(np.array([ytrain[i]]))\n",
        "            target = target.to(device)\n",
        "            loss = loss_function(class_scores, target)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "        if(epoch % epoch_interval == 0):\n",
        "            print (\"epoch: \", epoch+1, \"   loss: \", loss)\n",
        "\n",
        "    train_softs = np.zeros((numTrain, 4))\n",
        "    with torch.no_grad():\n",
        "        for i in range(numTrain):\n",
        "            train_class_scores = model(trainAdjs[i], trainNats[i])\n",
        "            train_softs[i] = train_class_scores.flatten()\n",
        "    return train_softs\n",
        "\n",
        "def run_tsne():\n",
        "    print(\"running for t-SNE...\")\n",
        "    trans = GetTransposed2D(mvts_1540)\n",
        "    data2d = Make2D(trans)\n",
        "    scaler = GetStandardScaler(data2d)\n",
        "    all_train = transform_scale_data(mvts_1540, scaler)\n",
        "\n",
        "    # Before t-SNE representation, train the model for 100 epochs\n",
        "    train_softs = get_all_train_softs_by_running_epochs(all_train, labels_1540, epochs = 100, epoch_interval = 10)\n",
        "\n",
        "    train_tsne = TSNE(random_state=0).fit_transform(train_softs)\n",
        "\n",
        "    show_tsne_representation(train_tsne, labels_1540)\n",
        "\n",
        "run_tsne()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LPCzoqvRnaCj",
        "outputId": "a9bcc0e7-90ee-4273-a604-ab15ad94322c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "running for t-SNE...\n\nepoch:  1    loss:  tensor(0.0102, device='cuda:0', dtype=torch.float64,\n\n       grad_fn=<NllLossBackward0>)\n\nepoch:  11    loss:  tensor(0.0044, device='cuda:0', dtype=torch.float64,\n\n       grad_fn=<NllLossBackward0>)\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torch-geometric #Install the missing module"
      ],
      "metadata": {
        "id": "R2kDbdwQfZxW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}